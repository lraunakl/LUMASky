name: AI Project Kickoff
description: 'AI-powered project initialization with automated backlog generation'

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project Name (e.g., LUMA Cart)'
        required: true
        default: 'LUMA Cart'
        type: string
      project_type:
        description: 'Project Type'
        required: true
        default: 'ecommerce'
        type: choice
        options:
          - ecommerce
          - web-app
          - api
          - mobile-app
          - desktop-app
      core_features:
        description: 'Core Features (comma-separated)'
        required: true
        default: 'Authentication,Cart Management,Product Catalog,User Profile,Payment Integration,Order Management'
        type: string
      complexity_level:
        description: 'Project Complexity'
        required: true
        default: 'medium'
        type: choice
        options:
          - simple
          - medium
          - complex
      target_sprint_count:
        description: 'Target Sprint Count'
        required: true
        default: '6'
        type: string

permissions:
  contents: write
  issues: write
  projects: write
  pull-requests: write
  repository-projects: write

jobs:
  ai-project-kickoff:
    runs-on: ubuntu-latest
    name: Generate AI-Powered Project Backlog
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          npm install --save-dev @octokit/rest
          npm install --save-dev yaml
          
      - name: Generate Project Structure
        id: project-analysis
        run: |
          cat > project_analyzer.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN,
          });
          
          const projectTemplates = {
            ecommerce: {
              epics: [
                {
                  title: "User Authentication System",
                  description: "Comprehensive user management with registration, login, password reset, and profile management",
                  features: ["User Registration", "User Login", "Password Reset", "Profile Management", "Email Verification"],
                  priority: "High",
                  storyPoints: 21
                },
                {
                  title: "Product Catalog Management",
                  description: "Product display, categorization, search, and filtering capabilities",
                  features: ["Product Listing", "Product Details", "Categories", "Search Functionality", "Product Filters"],
                  priority: "High",
                  storyPoints: 34
                },
                {
                  title: "Shopping Cart System",
                  description: "Cart functionality with add/remove items, quantity management, and persistence",
                  features: ["Add to Cart", "Remove from Cart", "Update Quantities", "Cart Persistence", "Cart Summary"],
                  priority: "High",
                  storyPoints: 21
                },
                {
                  title: "Order Management",
                  description: "Order processing, tracking, and history management",
                  features: ["Order Creation", "Order Tracking", "Order History", "Order Status Updates"],
                  priority: "Medium",
                  storyPoints: 34
                },
                {
                  title: "Payment Integration",
                  description: "Secure payment processing with multiple payment methods",
                  features: ["Payment Gateway", "Multiple Payment Methods", "Payment Validation", "Payment History"],
                  priority: "Medium",
                  storyPoints: 55
                },
                {
                  title: "Admin Dashboard",
                  description: "Administrative interface for managing products, orders, and users",
                  features: ["Product Management", "Order Management", "User Management", "Analytics Dashboard"],
                  priority: "Low",
                  storyPoints: 34
                }
              ],
              techStack: ["Node.js", "Express.js", "MongoDB", "JWT Authentication", "React/Vue.js"],
              estimatedDuration: "12-16 weeks"
            }
          };
          
          const projectName = process.env.PROJECT_NAME || 'LUMA Cart';
          const projectType = process.env.PROJECT_TYPE || 'ecommerce';
          const coreFeatures = (process.env.CORE_FEATURES || '').split(',').map(f => f.trim());
          const complexity = process.env.COMPLEXITY_LEVEL || 'medium';
          
          const template = projectTemplates[projectType] || projectTemplates.ecommerce;
          
          // Complexity multipliers
          const complexityMultipliers = {
            simple: 0.7,
            medium: 1.0,
            complex: 1.5
          };
          
          const multiplier = complexityMultipliers[complexity];
          
          console.log('=== AI PROJECT KICKOFF ANALYSIS ===');
          console.log(`Project: ${projectName}`);
          console.log(`Type: ${projectType}`);
          console.log(`Complexity: ${complexity}`);
          console.log(`Features: ${coreFeatures.join(', ')}`);
          console.log('');
          
          const processedEpics = template.epics.map(epic => ({
            ...epic,
            storyPoints: Math.ceil(epic.storyPoints * multiplier)
          }));
          
          const totalStoryPoints = processedEpics.reduce((sum, epic) => sum + epic.storyPoints, 0);
          
          console.log('=== GENERATED EPICS ===');
          processedEpics.forEach((epic, index) => {
            console.log(`${index + 1}. ${epic.title} (${epic.storyPoints} SP)`);
            console.log(`   Priority: ${epic.priority}`);
            console.log(`   Features: ${epic.features.join(', ')}`);
            console.log('');
          });
          
          console.log(`Total Estimated Story Points: ${totalStoryPoints}`);
          console.log(`Estimated Duration: ${template.estimatedDuration}`);
          console.log(`Recommended Tech Stack: ${template.techStack.join(', ')}`);
          
          // Export data for GitHub Actions
          const fs = require('fs');
          fs.writeFileSync('project_data.json', JSON.stringify({
            projectName,
            projectType,
            complexity,
            epics: processedEpics,
            totalStoryPoints,
            techStack: template.techStack,
            estimatedDuration: template.estimatedDuration
          }, null, 2));
          
          EOF
          
          node project_analyzer.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NAME: ${{ inputs.project_name }}
          PROJECT_TYPE: ${{ inputs.project_type }}
          CORE_FEATURES: ${{ inputs.core_features }}
          COMPLEXITY_LEVEL: ${{ inputs.complexity_level }}
          
      - name: Create GitHub Issues from Generated Epics
        run: |
          cat > create_issues.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs');
          
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN,
          });
          
          const projectData = JSON.parse(fs.readFileSync('project_data.json', 'utf8'));
          
          async function createIssues() {
            console.log('Creating GitHub Issues for project epics...');
            
            const labels = ['epic', 'ai-generated', 'project-kickoff'];
            
            for (const [index, epic] of projectData.epics.entries()) {
              const issueBody = `## Epic Description
${epic.description}

## Features Included
${epic.features.map(feature => `- [ ] ${feature}`).join('\n')}

## Acceptance Criteria
- [ ] All listed features are implemented and tested
- [ ] Code follows project conventions and standards
- [ ] Documentation is updated
- [ ] Unit and integration tests are added

## Technical Notes
- **Story Points:** ${epic.storyPoints}
- **Priority:** ${epic.priority}
- **Estimated Complexity:** ${process.env.COMPLEXITY_LEVEL}

## Dependencies
${index === 0 ? 'None - This is a foundational epic' : `Depends on completion of previous epics`}

---
*This issue was generated automatically by the AI Project Kickoff workflow*
*Project: ${projectData.projectName} | Type: ${projectData.projectType}*`;
              
              try {
                const issue = await octokit.rest.issues.create({
                  owner: process.env.GITHUB_REPOSITORY.split('/')[0],
                  repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                  title: `[EPIC] ${epic.title}`,
                  body: issueBody,
                  labels: [...labels, `priority-${epic.priority.toLowerCase()}`, `story-points-${epic.storyPoints}`],
                  assignees: [],
                });
                
                console.log(`✅ Created issue #${issue.data.number}: ${epic.title}`);
                
                // Add a small delay to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 1000));
                
              } catch (error) {
                console.error(`❌ Failed to create issue for ${epic.title}:`, error.message);
              }
            }
            
            // Create a project summary issue
            const summaryBody = `# ${projectData.projectName} - Project Overview

## Project Details
- **Type:** ${projectData.projectType}
- **Complexity:** ${projectData.complexity}
- **Total Story Points:** ${projectData.totalStoryPoints}
- **Estimated Duration:** ${projectData.estimatedDuration}

## Technology Stack
${projectData.techStack.map(tech => `- ${tech}`).join('\n')}

## Epic Overview
${projectData.epics.map((epic, i) => `${i + 1}. **${epic.title}** - ${epic.storyPoints} SP (${epic.priority} Priority)`).join('\n')}

## Next Steps
1. Review and refine the generated epics
2. Break down epics into smaller user stories
3. Set up project board and assign team members
4. Begin development with the highest priority epic

---
*Generated by AI Project Kickoff on ${new Date().toISOString().split('T')[0]}*`;
            
            try {
              const summaryIssue = await octokit.rest.issues.create({
                owner: process.env.GITHUB_REPOSITORY.split('/')[0],
                repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                title: `📋 ${projectData.projectName} - Project Roadmap & Overview`,
                body: summaryBody,
                labels: ['project-overview', 'roadmap', 'ai-generated', 'pinned'],
              });
              
              console.log(`✅ Created project overview issue #${summaryIssue.data.number}`);
              
            } catch (error) {
              console.error('❌ Failed to create project overview issue:', error.message);
            }
          }
          
          createIssues().catch(console.error);
          EOF
          
          node create_issues.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          COMPLEXITY_LEVEL: ${{ inputs.complexity_level }}
          
      - name: Generate Project Board Setup Instructions
        run: |
          cat > project_board_setup.md << 'EOF'
          # GitHub Project Board Setup Instructions
          
          ## Automated Setup Complete! 🎉
          
          The AI Project Kickoff has successfully generated:
          - ✅ Epic-level issues with story point estimates
          - ✅ Priority classifications
          - ✅ Feature breakdowns
          - ✅ Project overview and roadmap
          
          ## Next Steps:
          
          ### 1. Create GitHub Project Board
          ```bash
          # Go to your repository
          # Click on "Projects" tab
          # Click "New project"
          # Choose "Board" template
          # Name it: "LUMA Cart Development Board"
          ```
          
          ### 2. Configure Custom Fields
          Add these custom fields to your project:
          - **Story Points** (Number field)
          - **Priority** (Single select: High, Medium, Low)
          - **Epic** (Text field)
          - **Sprint** (Single select: Sprint 1, Sprint 2, etc.)
          - **Status** (Single select: Backlog, In Progress, Review, Done)
          
          ### 3. Add Generated Issues to Project
          1. Open your new project board
          2. Click "Add items"
          3. Search for issues with labels: `epic`, `ai-generated`
          4. Add all generated epic issues to your project
          
          ### 4. Organize Your Backlog
          - Move high-priority epics to "Sprint 1" planning
          - Break down epics into smaller user stories (3-8 story points each)
          - Assign story points using the Fibonacci sequence (1, 2, 3, 5, 8, 13, 21)
          
          ## Generated Project Statistics
          EOF
          
          cat project_data.json >> project_board_setup.md
          
          echo "" >> project_board_setup.md
          echo "## Recommended Sprint Planning" >> project_board_setup.md
          echo "Based on a 2-week sprint cycle:" >> project_board_setup.md
          echo "- Sprint 1-2: User Authentication System" >> project_board_setup.md
          echo "- Sprint 3-4: Product Catalog Management" >> project_board_setup.md
          echo "- Sprint 5-6: Shopping Cart System" >> project_board_setup.md
          
          cat project_board_setup.md
          
      - name: Create Project Documentation
        run: |
          mkdir -p docs/project-planning
          mv project_data.json docs/project-planning/
          mv project_board_setup.md docs/project-planning/
          
          # Create a project charter
          cat > docs/project-planning/project-charter.md << 'EOF'
          # LUMA Cart Project Charter
          
          ## Project Vision
          Develop a modern, scalable e-commerce application with essential shopping cart functionality, user authentication, and product management capabilities.
          
          ## Success Criteria
          - [ ] User can register, login, and manage their profile
          - [ ] User can browse products and add them to cart
          - [ ] User can manage cart contents and proceed to checkout
          - [ ] Admin can manage products and orders
          - [ ] System is secure, tested, and well-documented
          
          ## Project Scope
          **In Scope:**
          - User authentication and profile management
          - Product catalog with search and filtering
          - Shopping cart functionality
          - Basic order processing
          - Admin dashboard for content management
          
          **Out of Scope (Future Releases):**
          - Advanced analytics and reporting
          - Multi-vendor support
          - Advanced inventory management
          - Mobile application
          
          ## Technical Architecture
          - **Backend:** Node.js with Express.js framework
          - **Database:** MongoDB with Mongoose ODM
          - **Authentication:** JWT-based authentication
          - **Frontend:** React.js or Vue.js (TBD)
          - **Testing:** Mocha, Chai, and Supertest
          
          ## Risk Assessment
          - **Medium Risk:** Payment integration complexity
          - **Low Risk:** Standard CRUD operations
          - **Mitigation:** Phased development approach
          
          ---
          *Document generated by AI Project Kickoff*
          EOF
          
      - name: Commit Generated Documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "docs: add AI-generated project planning documentation
          
          - Project charter with scope and technical architecture
          - Project board setup instructions
          - Generated epic breakdown with story points
          - Sprint planning recommendations
          
          Generated for: ${{ inputs.project_name }}
          Project type: ${{ inputs.project_type }}
          Complexity: ${{ inputs.complexity_level }}" || echo "No changes to commit"
          git push
          
      - name: Workflow Summary
        run: |
          echo "## 🚀 AI Project Kickoff Complete!"
          echo ""
          echo "### Generated Artifacts:"
          echo "- ✅ Epic-level GitHub Issues with story point estimates"
          echo "- ✅ Project overview and roadmap issue"
          echo "- ✅ Project charter and documentation"
          echo "- ✅ Sprint planning recommendations"
          echo ""
          echo "### Next Steps:"
          echo "1. Review the generated issues in the Issues tab"
          echo "2. Set up a GitHub Project board following docs/project-planning/project_board_setup.md"
          echo "3. Break down epics into smaller user stories"
          echo "4. Begin development with the highest priority items"
          echo ""
          echo "### Project Details:"
          echo "- Project: ${{ inputs.project_name }}"
          echo "- Type: ${{ inputs.project_type }}"
          echo "- Complexity: ${{ inputs.complexity_level }}"
          echo "- Target Sprints: ${{ inputs.target_sprint_count }}"
